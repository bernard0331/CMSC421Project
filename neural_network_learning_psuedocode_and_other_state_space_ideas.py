# -*- coding: utf-8 -*-
"""Neural-network-learning_psuedocode_and other_state_space_ideas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yx8_ulohKAun1q58I5IbuH2jOcU7C1jO

This is more sudo code to allow for ideas around building a Neural Network as well as code related to getting the state space
"""

import numpy as np
from keras.models import Sequential
from keras.layers import InputLayer
from keras.layers import Dense

model = Sequential()
model.add(InputLayer(batch_input_shape=(1, "observation_space_size"))) #builds input layer
model.add(Dense("action_space_count", activation='linear'))  #essentially builds hidden layer after researching keras there so many different layers we can build and add to this
model.compile(loss='mse', optimizer='adam', metrics=['mae'])  #builds network model

for i in range("num_runs"):
    state = "however we would reset the state"
    done = False
    while not done:
        if "randomly  decided to take a random action":
            action = np.random.randint(0, "action_space_count")
        else:
            action = np.argmax(
              model.predict(np.identity("observation_space_size")[state:state + 1]))
        new_state, reward, done, = #determine the states of the next step reward etc.
        target = reward +
          discount_factor *
            np.max(
              model.predict(
                np.identity("observation_space_size")[new_state:new_state + 1]))
        target_vector = model.predict(
          np.identity("observation_space_size")[state:state + 1])[0]
        target_vector[action] = target
        model.fit(
          np.identity("observation_space_size")[state:state + 1],
          target_vec.reshape(-1, "action_space_count"),
          epochs=1, verbose=0)
        state = new_state

"""Then psuedo code for possible other ways to get the state space besides images just looking into it if we were to use https://pypi.org/project/gym-super-mario-bros/ this link is for a gym version of super mario we could train on there is also a scratch version of geometry dash we could use but we would have to build it or at least parts of it https://scratch.mit.edu/projects/105500895/ we can then have access to the code and as a result can keep up with each positioning of each thing depending on where the player is as well as the spikes and everything around it so we could consider that as an option"""